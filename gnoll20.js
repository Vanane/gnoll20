export function createElementFromHTML(html) { var template = document.createElement('template'); template.innerHTML = html; return template.content.children[0]; } export function clamp(v, min, max) { return v > max ? max : v < min ? min : v; };export class ComponentManager { /** @type {ComponentManager} */ static instance = null; /** @type {MouseEvent} */ mouse; /** @type {MouseEvent} */ prevMouse; /** @type {Blank} */ blank; /** @type {Component} */ root; constructor() { if(ComponentManager.instance != null) throw Error("Already instanciated"); ComponentManager.instance = this; this.components = {}; this.enableMousePosition(); this.setRootComponent(); this.blank = Blank.instantiate(this.root, "_blank").setAttributes({ name:"_blank" }); } enableMousePosition() { document.ondragover = (e) => { /* Met à jour la variable this.mouse lorsqu'on drag un onglet */ this.prevMouse = this.mouse; this.mouse = e; }; document.onmousemove = (e) => { /* Met à jour la variable this.mouse lorsqu'on passe la souris par-dessus n'improte quel élément. OnDragOver annule cet event, c'est pourquoi nous utilisons les deux events. */ this.prevMouse = this.mouse; this.mouse = e; }; } setRootComponent() { this.root = Component.getRoot(); document.body.appendChild(this.root.dom); } addComponent(c) { if(c.name) this.components[c.name] = c; else throw Error("Component lacks name"); } };/** * Encapsulation de la création dynamique d'élément */ export class Component { /** @type {string} */ static baseHTML = ``; /** @type {Component} */ parent; /** @type {HTMLElement} */ dom; /** @type {string} */ name; /** @type {Boolean} */ restrictDrag; static instantiate(parent, name) { return new Component(parent, name); } static fromRaw(parent, name, html) { var c = new Component(parent, name, false); return c.write(html); } static getRoot() { var r = new Component(null, "root", false); return r.write("<div id='root'></div>", false); } /** * * @param {Component} parent * @param {*} name * @param {*} write */ constructor(parent, name, write=true) { this.parent = parent; this.name = name; if(write) this.write(this.constructor.baseHTML); ComponentManager.instance.addComponent(this); } setAttributes(attrs) { for(var i in attrs) { this.dom.setAttribute(i, attrs[i]); } return this; } setStyle(styleAttrs) { for(var i in styleAttrs) { this.dom.style[i] = styleAttrs[i]; } return this; } makeDraggable(bool=true) { if(bool) { this.dom.setAttribute('draggable', 'true'); this.dom.classList.add('draggable'); this.dom.ondragstart = this.onDragStart; this.dom.ondrag = this.onDrag; } else { this.dom.removeAttribute('draggable'); this.dom.classList.remove('draggable'); delete this.dom.ondragstart; delete this.dom.ondrag; } return this; } afterDrag(func=null) { this.dom.ondragend = func; } restrictDragToParent(bool=true) { this.restrictDrag = bool; return this; } makeClickable(bool=true, func=null) { if(bool) this.dom.onclick = func; else delete this.dom.onclick; return this; } /** * * @param {strgin} axis Quel côté redimensionner : bottom, top, left, right (voir Resizer.axes) */ makeResizable(...axes) { for(var i in axes) { var axis = axes[i]; if(axis in Resizer.axes) Resizer.instantiate(this, `${this.name}-resizer`, axis); else throw Error(`Axis ${axis} not in Resizer.axes`); } return this; } makeFixed() { this.setStyle({ position:"fixed", top:'0', left:'0' }); return this; } write(html, append=true) { if(!html) throw Error("Empty HTML given"); this.dom = createElementFromHTML(html); console.log(this.parent); this.dom.component = this; if(append) this.parent.dom.appendChild(this.dom); return this; } /** Events **/ onDragStart(e) { e.dataTransfer.setDragImage(ComponentManager.instance.blank.dom, 0, 0); this.mouseOffset = { x: ComponentManager.instance.mouse.clientX - this.style.left.split('px')[0], y: ComponentManager.instance.mouse.clientY - this.style.top.split('px')[0] }; } onDrag(e) { var rect = this.getBoundingClientRect(); var parentRect = this.parentElement.getBoundingClientRect(); var x = ComponentManager.instance.mouse.clientX - this.mouseOffset.x; var y = ComponentManager.instance.mouse.clientY - this.mouseOffset.y; if(this.component.restrictDrag) { x = clamp(x, parentRect.x, parentRect.x + parentRect.width - rect.width); y = clamp(y, parentRect.y, parentRect.y + parentRect.height - rect.height); } this.style.left = `${x}px`; this.style.top = `${y}px`; } };export class Blank extends Component { static baseHTML = `<span></span>`; static instantiate(parent, name, id) { return new Blank(parent, name); } };/** * Encapsulation de Component pour ajouter du comportement autour d'un élément */ export class Layer extends Component { static baseHTML = `<canvas class='board-layer'><img class="layer-img"></img></canvas>`; /** @type {Token[]}} */ tokens; /** @type {CanvasRenderingContext2D} */ context2D; /** @type {HTMLImageElement} */ backgroundImage; static instantiate(parent, name) { return new Layer(parent, name); } constructor(parent, name) { super(parent, name); this.setAttributes({name}); this.tokens = []; this.context2D = this.dom.getContext("2d"); this.backgroundImage = this.dom.getElementsByTagName("img")[0]; } setBackgroundURL(bg) { var img = this.dom.getElementsByTagName("img")[0]; img.src = bg; img.onload = () => { this.renderAll() }; return this; } /** Spécifique layer **/ addToken(t) { this.tokens[t.name] = t; this.renderAll(); return this; } removeToken(name) { delete this.tokens[name]; this.renderAll(); return this; } renderBackground() { this.context2D.drawImage(this.backgroundImage, 0, 0); } renderTokens() { for(var t in this.tokens) { this.context2D.drawImage(t.getImage(), t.position.x, t.position.y); } } renderLight() { } renderGrid() { } renderAll() { this.renderBackground(); this.renderLight(); this.renderGrid(); this.renderTokens(); } };export class Token extends Component { static baseHTML = `<div class="board-token"><span class="token-title">prout</span><img class="token-img"><img></div>`; /** @type {HTMLSpanElement} */ title; /** @type {HTMLImageElement} */ image; static instantiate(parent, name) { return new Token(parent, name).makeDraggable().restrictDragToParent(); } constructor(parent, name) { super(parent, name); this.title = this.dom.getElementsByClassName("token-title")[0]; this.image = this.dom.getElementsByClassName("token-img")[0]; } setTitle(title) { this.title.innerHTML = `${title}`; return this; } setImage(url) { this.image.src = url; return this; } };export class SideBar extends Component { static baseHTML = `<div class="sidebar"><span class="sidebar-title"></span></div>`; /** @type {HTMLSpanElement} */ title; /** @type {HTMLElement} */ content; static instantiate(parent, name) { return new SideBar(parent, name); } constructor(parent, name) { super(parent, name); this.title = this.dom.getElementsByClassName("sidebar-title")[0]; this.content = this.dom.getElementsByClassName("sidebar-content")[0]; } setTitle(title) { this.title.innerHTML = `${title}`; return this; } setContent(content) { this.content.innerHTML = `${content}`; return this; } setWidth(width) { this.dom.style.width = `${width}`; return this; } };export class Resizer extends Component { static baseHTML = `<div class="resizer"></div>`; static axes = {top:"top", left:"left", bottom:"bottom", right:"right"}; /** @type {Component} */ target; static instantiate(parent, name, axis) { return new Resizer(parent, `${name}-${axis}`, axis); } constructor(parent, name, axis) { super(parent, name); this.parent.setStyle({ minWidth:'0px', minHeight:'0px' }); this.setStyle({ zIndex:'1000' }) .setAttributes({draggable:'true'}) .setTarget(parent) .setAxis(axis); this.dom.classList.add('resizer'); this.dom.ondragstart = this.onResizerDragStart; } setTarget(target) { this.target = target; return this; } setAxis(axis) { this.axis = axis; this.dom.classList.add(`resizer-${this.axis}`); switch(this.axis) { case Resizer.axes.bottom: this.dom.ondrag = this.onResizeBottom; break; case Resizer.axes.top: this.dom.ondrag = this.onResizeTop; break; case Resizer.axes.left: this.dom.ondrag = this.onResizeLeft; break; case Resizer.axes.right: this.dom.ondrag = this.onResizeRight; break; } return this; } /** Events Resize **/ onResizerDragStart(e) { e.dataTransfer.setDragImage(ComponentManager.instance.blank.dom, 0, 0); var style = window.getComputedStyle(this.component.target.dom); this.component.drag = { start: e, position: { x:parseInt(style.left.slice(0, -2)), y:parseInt(style.top.slice(0, -2)) }, dimension: { w: parseInt(style.width.slice(0, -2)), h: parseInt(style.height.slice(0, -2)) } }; e.stopPropagation(); } onResizeBottom(e) { var h = this.component.drag.dimension.h + (ComponentManager.instance.mouse.clientY - this.component.drag.start.clientY); this.component.target.dom.style.height = `${h}px`; e.stopPropagation(); } onResizeTop(e) { var h = this.component.drag.dimension.h - (ComponentManager.instance.mouse.clientY - this.component.drag.start.clientY); var t = clamp(this.component.drag.position.y - (this.component.drag.start.clientY - ComponentManager.instance.mouse.clientY), 0, this.component.drag.position.y + this.component.drag.dimension.h); this.component.target.dom.style.height = `${h}px`; this.component.target.dom.style.top = `${t}px`; e.stopPropagation(); } onResizeLeft(e) { var w = this.component.drag.dimension.w - (ComponentManager.instance.mouse.clientX - this.component.drag.start.clientX); var l = clamp(this.component.drag.position.x - (this.component.drag.start.clientX - ComponentManager.instance.mouse.clientX), 0, this.component.drag.position.x + this.component.drag.dimension.w); this.component.target.dom.style.width = `${w}px`; this.component.target.dom.style.left = `${l}px`; e.stopPropagation(); } onResizeRight(e) { var w = this.component.drag.dimension.w + (ComponentManager.instance.mouse.clientX - this.component.drag.start.clientX); this.component.target.dom.style.width = `${w}px`; e.stopPropagation(); } }export class Container extends Component { static baseHTML = `<div class='container'></div>`; static instantiate(parent, name) { return new Container(parent, name).setAttributes({name}); } constructor(parent, name) { super(parent, name); } }export class Button extends Component { static baseHTML = `<a class='button' href='#'></a>`; static instantiate(parent, name) { return new Button(parent, name); } constructor(parent, name) { super(parent, name); } setLabel(lbl) { this.dom.innerHTML = lbl; return this; } setAction(func) { this.dom.onclick = func; return this; } }